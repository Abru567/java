package libreria.persistencia;

import java.util.List;
import libreria.Entidades.Autor;

/**
 */
public class AutorDAO extends DAO<Autor> {

    @Override
    public void guardar(Autor Autor) {
        super.guardar(Autor);
    }

    public void eliminar(String nombre) throws Exception {
        Autor a = buscarPorNombre(nombre);
        super.eliminar(a);
    }

    public Autor buscarPorId(String id) throws Exception {
        conectar();
        Autor autor = em.find(Autor.class, id);
        desconectar();
        return autor;
    }

    public List<Autor> listarTodos() throws Exception {
        conectar();
        List<Autor> autores = em.createQuery("SELECT a FROM Autor a")
                .getResultList();
        desconectar();
        return autores;
    }

    public Autor buscarPorNombre(String nombre) {
        conectar();
        Autor a = (Autor) em.createQuery("SELECT a FROM Autor a WHERE a.nombre LIKE :nombre")
                .setParameter("nombre", nombre).getSingleResult();
        desconectar();
        return a;
    }

    public void actualizarAutor(Autor objeto) {
        conectar();
        em.getTransaction().begin();
        em.merge(objeto);
        em.getTransaction().commit();
        desconectar();
    }
    

}
****************************************************
package libreria.persistencia;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

/**
 *

 */
public class DAO<T> {
    
    protected final EntityManagerFactory EMF = Persistence.createEntityManagerFactory("LibreriaPU");
    protected EntityManager em = EMF.createEntityManager();
    
    // Este método nos permite conectar con la base de datos
    // se verifica si la conexión está realizada, en caso que
    // no esté realizada, se realiza en la línea 24.
    protected void conectar() {
        if (!em.isOpen()) {
            em = EMF.createEntityManager();
        }
    }

    // Este método nos permite desconectarnos de la base de datos
    // Se verifica si existe una conexión, y de ser el caso, se
    // cierra la conexión y se desconecta el programa con la base de datos.
    protected void desconectar() {
        if (em.isOpen()) {
            em.close();
        }
    }
    
    // este método nos permite persistir un objeto en la base de datos.
    // Toma como parámetro el objeto a persistir, vemos que es genérico, por
    // lo que puede aceptar cualquier tipo de objeto (Dirección, Mastoca, Persona)
    protected void guardar(T objeto){
        conectar();
        em.getTransaction().begin();
        em.persist(objeto);
        em.getTransaction().commit();
        desconectar();
    }
    
    // Este método nos permite modificar una tupla de una base de datos.
    // Recibe como parámetro el objeto con los datos cambiados (debe mantener
    // la misma llave primaria) y lo reemplaza por el anterior.
    protected void editar(T objeto){
        conectar();
        em.getTransaction().begin();
        em.merge(objeto);
        em.getTransaction().commit();
        desconectar();
    }
    
    // Este método nos permite eliminar un registro de la base de datos.
    // Como parámetro se pasa el objeto a eliminar de la base de datos.
    // Se busca en la base de datos el registro que contenga la misma información
    // que el parámetro recibido, y se elimina.
    protected void eliminar(T objeto){
        conectar();
        em.getTransaction().begin();
        em.remove(objeto);
        em.getTransaction().commit();
        desconectar();
    }

    
}
*************************************************
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package libreria.persistencia;

import java.util.List;
import libreria.Entidades.Editorial;

/**
 *

 */
public class EditorialDAO extends DAO<Editorial> {
    @Override
    public void guardar(Editorial Editorial) {
        super.guardar(Editorial);
    }

    public void eliminar(String id) throws Exception {
        Editorial Editorial = buscarPorId(id);
        super.eliminar(Editorial);
    }

    public Editorial buscarPorId(String id) throws Exception {
        conectar();
        Editorial editorial = em.find(Editorial.class, id);
        desconectar();
        return editorial;
    }

    public List<Editorial> listarTodos() throws Exception {
        conectar();
        List<Editorial> Editoriales = em.createQuery("SELECT e FROM Editorial e")
                .getResultList();
        desconectar();
        return Editoriales;
    }
    
     public Editorial buscarPorNombre(String nombre) {
        conectar();
        Editorial e = (Editorial) em.createQuery("SELECT e FROM Editorial e WHERE e.nombre LIKE :nombre")
                .setParameter("nombre", nombre).getSingleResult();
        desconectar();
        return e;
    }
     *************************************************************
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package libreria.persistencia;

import java.util.List;
import libreria.Entidades.Libro;

/**
 *

 */
public class LibroDAO extends DAO<Libro> {
    
    @Override
    public void guardar(Libro Libro) {
        super.guardar(Libro);
    }

    public void eliminar(String isbn) throws Exception {
        Libro Libro = buscarPorIsbn(isbn);
        super.eliminar(Libro);
    }

    public Libro buscarPorIsbn(String isbn) throws Exception {
        conectar();
        Libro Libro = em.find(Libro.class, isbn);
        desconectar();
        return Libro;
    }

    public List<Libro> listarTodos() throws Exception {
        conectar();
        List<Libro> libros = em.createQuery("SELECT l FROM Libro l")
                .getResultList();
        desconectar();
        return libros;
    }
    
    public void actualizarLibro(Libro objeto) {
        conectar();
        em.getTransaction().begin();
        em.merge(objeto);
        em.getTransaction().commit();
        desconectar();
    }
    
    
    